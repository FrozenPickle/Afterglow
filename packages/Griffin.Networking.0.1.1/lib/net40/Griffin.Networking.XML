<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.Networking</name>
    </assembly>
    <members>
        <member name="T:Griffin.Networking.Messages.ReceivedInStream">
            <summary>
            Channel received more bytes in the stream
            </summary>
            <remarks>All streams used by this message support the <see cref="T:Griffin.Networking.Buffers.IPeekable"/> interface. </remarks>
        </member>
        <member name="T:Griffin.Networking.IPipelineMessage">
            <summary>
            A message being sent either downstream or upstream in a pipeline
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.ReceivedInStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.ReceivedInStream"/> class.
            </summary>
            <param name="stream">Stream that received bytes were written to.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.ReceivedInStream.Stream">
            <summary>
            Gets stream that received bytes were written to
            </summary>
            <remarks>The stream is owned by the channel, do not dispose it</remarks>
        </member>
        <member name="T:Griffin.Networking.Messages.Disconnect">
            <summary>
            Disconnect from remote end point.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.FilteredLogger">
            <summary>
            Logger that filters on level
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.BaseLogger">
            <summary>
            Base class for loggers.
            </summary>
            <remarks>All you have to do is to override <see cref="M:Griffin.Networking.Logging.BaseLogger.Write(Griffin.Networking.Logging.LogLevel,System.String,System.Exception)"/>.</remarks>
        </member>
        <member name="T:Griffin.Networking.Logging.ILogger">
            <summary>
            Logging interface
            </summary>
            <remarks>You typically just want to log the warnings and the errors from the framework since your logs
            will probably be filled very quickly otherwise.</remarks>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Trace(System.String)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Trace(System.String,System.Exception)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Thrown exception</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Debug(System.String)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Warning(System.String)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Warning(System.String,System.Exception)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Error(System.String)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.BaseLogger"/> class.
            </summary>
            <param name="loggedType">Type being logged.</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Trace(System.String)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Trace(System.String,System.Exception)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Thrown exception</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Debug(System.String)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Debug(System.String,System.Exception)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Warning(System.String)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Warning(System.String,System.Exception)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Error(System.String)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Error(System.String,System.Exception)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.Write(Griffin.Networking.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the specified log level.
            </summary>
            <param name="logLevel">Used level.</param>
            <param name="msg">Message.</param>
            <param name="exception">The exception (or null).</param>
        </member>
        <member name="M:Griffin.Networking.Logging.BaseLogger.BuildExceptionDetails(System.Exception,System.Int32)">
            <summary>
            Formats exception details (including all inner exceptions)
            </summary>
            <param name="exception">Thrown exception.</param>
            <param name="spaces">Number of spaces to prefix each line with.</param>
            <returns>Formatted exception information</returns>
            <remarks>Increases the number of spaces for each inner exception so it's easy to see all information</remarks>
        </member>
        <member name="P:Griffin.Networking.Logging.BaseLogger.SkipFrameCount">
            <summary>
            Gets number of frames to skip when using stack trace
            </summary>
        </member>
        <member name="P:Griffin.Networking.Logging.BaseLogger.LoggedType">
            <summary>
            Gets the type for the class which logs using this class
            </summary>
        </member>
        <member name="M:Griffin.Networking.Logging.FilteredLogger.#ctor(System.Type,Griffin.Networking.Logging.BaseLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.FilteredLogger"/> class.
            </summary>
            <param name="type">Tyep that logs.</param>
            <param name="innerLogger">The inner logger (invoked if the filter requirements are fulfilled).</param>
        </member>
        <member name="M:Griffin.Networking.Logging.FilteredLogger.#ctor(Griffin.Networking.Logging.LogLevel,System.Type,Griffin.Networking.Logging.BaseLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.FilteredLogger"/> class.
            </summary>
            <param name="minLevel">The minimum level to log.</param>
            <param name="loggedType">Type being logged.</param>
            <param name="innerLogger">The inner logger (invoked if the filter requirements are fulfilled).</param>
        </member>
        <member name="M:Griffin.Networking.Logging.FilteredLogger.Write(Griffin.Networking.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Logs an entry to the source
            </summary>
            <param name="logLevel">Used level.</param>
            <param name="msg">Message.</param>
            <param name="exception">The exception (or null).</param>
        </member>
        <member name="P:Griffin.Networking.Logging.FilteredLogger.SkipFrameCount">
            <summary>
            Gets number of frames to skip when using stack trace
            </summary>
        </member>
        <member name="T:Griffin.Networking.IServiceLocator">
            <summary>
            Used to build all <see cref="T:Griffin.Networking.IPipelineHandler"/> classes.
            </summary>
            <remarks>
            <para>Important! It's up to your container to resolve the same instance of an class if it implements both <see cref="T:Griffin.Networking.IUpstreamHandler"/> and <see cref="T:Griffin.Networking.IDownstreamHandler"/> (and
            you need to use the same fields in both cases).
            </para>
            
            </remarks>
        </member>
        <member name="M:Griffin.Networking.IServiceLocator.Resolve(System.Type)">
            <summary>
            Resolve a service
            </summary>
            <param name="type">Type of service to locate.</param>
            <returns>The registered service</returns>
            <exception cref="T:System.InvalidOperationException">Failed to find service.</exception>
        </member>
        <member name="T:Griffin.Networking.Logging.LogManager">
            <summary>
            Logging facade
            </summary>
            <remarks>Implement an adapter for your own logging framework and assign it using <see cref="M:Griffin.Networking.Logging.LogManager.Assign(Griffin.Networking.Logging.LogManager)"/></remarks>
        </member>
        <member name="M:Griffin.Networking.Logging.LogManager.GetLogger``1">
            <summary>
            Get a logger
            </summary>
            <typeparam name="T">Type requesting a logger</typeparam>
            <returns>A logger</returns>
        </member>
        <member name="M:Griffin.Networking.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Get a logger
            </summary>
            <param name="loggingType">Type that will log messages</param>
            <returns>A logger</returns>
        </member>
        <member name="M:Griffin.Networking.Logging.LogManager.GetLoggerInternal(System.Type)">
            <summary>
            Get a logger for a type
            </summary>
            <param name="loggingType">Type that want's a logger</param>
            <returns>Default implementation returns a <see cref="T:Griffin.Networking.Logging.NullLogger"/></returns>
        </member>
        <member name="M:Griffin.Networking.Logging.LogManager.Assign(Griffin.Networking.Logging.LogManager)">
            <summary>
            Assign a logging adapter.
            </summary>
            <param name="logManager">Manager to use</param>
        </member>
        <member name="P:Griffin.Networking.Logging.LogManager.Current">
            <summary>
            Get the current adapter
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.BindSocket">
            <summary>
            bind socket for a server channel
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.BindSocket.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.BindSocket"/> class.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.BindSocket.EndPoint">
            <summary>
            Gets enpoint to bind
            </summary>
        </member>
        <member name="T:Griffin.Networking.IDownstreamHandler">
            <summary>
            A handler used to process everything sent from the client down to the channel
            </summary>
        </member>
        <member name="T:Griffin.Networking.IPipelineHandler">
            <summary>
            Purpose is to be able to register the same handler for both upstream and downstream in the bluprint
            </summary>
            <remarks>
            You should not derive this class directly.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.IDownstreamHandler.HandleDownstream(Griffin.Networking.IPipelineHandlerContext,Griffin.Networking.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <remarks>
            Should always call either <see cref="M:Griffin.Networking.IPipelineHandlerContext.SendDownstream(Griffin.Networking.IPipelineMessage)"/> or <see cref="M:Griffin.Networking.IPipelineHandlerContext.SendUpstream(Griffin.Networking.IPipelineMessage)"/>
            unless the handler really wants to stop the processing.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Channels.TcpServerChildChannel">
            <summary>
            A channel for a connected client in a server.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Channels.TcpChannel">
            <summary>
            TCP networking channel
            </summary>
        </member>
        <member name="T:Griffin.Networking.IChannel">
            <summary>
            A channel is a device used for the IO operations
            </summary>
            <remarks>
            <para>Each channel should be able to handle at least <see cref="T:Griffin.Networking.Messages.Close"/>, <see cref="T:Griffin.Networking.Messages.Connect"/>, <see cref="T:Griffin.Networking.Messages.SendSlice"/></para>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.IChannel.HandleDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            A message have been sent through the pipeline and are ready to be handled by the channel.
            </summary>
            <param name="message">Message that the channel should process.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.#ctor(Griffin.Networking.IPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpChannel"/> class.
            </summary>
            <param name="pipeline">The pipeline used to send messages upstream.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.#ctor(Griffin.Networking.IPipeline,Griffin.Networking.Buffers.BufferPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpChannel"/> class.
            </summary>
            <param name="pipeline">The pipeline used to send messages upstream.</param>
            <param name="pool">Buffer pool.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.HandleDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            A message have been sent through the pipeline and are ready to be handled by the channel.
            </summary>
            <param name="message">Message that the channel should process.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.SendUpstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Sends a message in the pipeline
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.Disconnect">
            <summary>
            Disconnect the channel
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.SendStream(Griffin.Networking.Messages.SendStream)">
            <summary>
            Send an entire stream
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.AssignSocket(System.Net.Sockets.Socket)">
            <summary>
            Assign the socket which will be used by the channel
            </summary>
            <param name="socket">Socket to use</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.CreateStream(System.Net.Sockets.Socket)">
            <summary>
            Create a new networking stream
            </summary>
            <param name="socket">Socket which the stream will wrap</param>
            <returns>Created stream</returns>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.StartRead">
            <summary>
            Start reading from the stream
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.Send(Griffin.Networking.Messages.SendSlice)">
            <summary>
            Send a buffer slice.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpChannel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Griffin.Networking.Channels.TcpChannel.Pipeline">
            <summary>
            Gets our pipeline
            </summary>
        </member>
        <member name="P:Griffin.Networking.Channels.TcpChannel.Logger">
            <summary>
            Gets logger used by the channel
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpServerChildChannel.#ctor(Griffin.Networking.IPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpServerChildChannel"/> class.
            </summary>
            <param name="pipeline">The pipeline used to send messages upstream.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpServerChildChannel.#ctor(Griffin.Networking.IPipeline,Griffin.Networking.Buffers.BufferPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpServerChildChannel"/> class.
            </summary>
            <param name="pipeline">The pipeline used to send messages upstream.</param>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpServerChildChannel.StartChannel">
            <summary>
            Start the channel (by invoking BeginRead)
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.Connected">
            <summary>
            Connected to an end point
            </summary>
            <remarks>
            Can be sent both in server and client channels to indicate that an connection have been established.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Messages.Connected.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.Connected"/> class.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.Connected.RemoteEndPoint">
            <summary>
            Gets address of the remote end point
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.NamespaceDoc">
            <summary>
            Contains a logging abstraction layer allowing you to use your favorite logging framework.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Channels.TcpClientChannel">
            <summary>
            A TCP channel used to connect to a remote end point
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpClientChannel.#ctor(Griffin.Networking.IPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpClientChannel"/> class.
            </summary>
            <param name="pipeline">The pipeline used to send messages upstream.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpClientChannel.HandleDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            A message have been sent through the pipeline and are ready to be handled by the channel.
            </summary>
            <param name="message">Message that the channel should process.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpClientChannel.Connect(System.Net.IPEndPoint)">
            <summary>
            Connect to a client
            </summary>
            <param name="remoteEndPoint"></param>
        </member>
        <member name="T:Griffin.Networking.IPipeline">
            <summary>
            Pipeline used to send information to/from a channel
            </summary>
            <remarks>
            <para>
            Pipelines are used to be let different handlers process
            messages to/from an <see cref="T:Griffin.Networking.IChannel"/> in an orderly fashion.
            </para>
            <para>
            All messages that a <see cref="T:Griffin.Networking.IPipelineHandler"/> can't process should be sent to the next handler
            using the supplied <see cref="T:Griffin.Networking.IPipelineHandlerContext"/>.
            </para>
            <para>
            Any failures in the pipeline should be be caught by the handler itself and sent upstream using the <see cref="T:Griffin.Networking.Messages.PipelineFailure"/> message. It gives the
            client a chance to decide which action to be taken.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.IPipeline.SendUpstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Send something from the channel to all handlers.
            </summary>
            <param name="message">Message to send to the client</param>
        </member>
        <member name="M:Griffin.Networking.IPipeline.SetChannel(Griffin.Networking.IChannel)">
            <summary>
            Set down stream end point
            </summary>
            <param name="channel">channel which will handle all down stream messages</param>
        </member>
        <member name="M:Griffin.Networking.IPipeline.SendDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Send a message from the client and downwards.
            </summary>
            <param name="message">Message to send to the channel</param>
        </member>
        <member name="T:Griffin.Networking.Pipelines.Pipeline">
            <summary>
            A pipeline is created for one channel only.
            </summary>
            <remarks>
              <para>
            Pipelines are used to transform the information recieved by the <see cref="T:Griffin.Networking.IChannel"/> before
            it reaches the client. Same thing goes when the client want to send something through the channel.
              </para>
              <para>
            You MUST call <see cref="M:Griffin.Networking.Pipelines.Pipeline.SetChannel(Griffin.Networking.IChannel)"/> before using the pipeline, since nothing till handle the messages otherwise (when all downstream handlers are finished).
              </para>
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.HandleDownstream(Griffin.Networking.IPipelineHandlerContext,Griffin.Networking.IPipelineMessage)">
            <summary>
            Process message
            </summary>
            <param name="context">Context information</param>
            <param name="message">Message to process</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.SetChannel(Griffin.Networking.IChannel)">
            <summary>
            Set down stream end point
            </summary>
            <param name="channel">channel which will handle all down stream messages</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.SendDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Send a message from the client and downwards.
            </summary>
            <param name="message">Message to send to the channel</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.SendUpstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Send something from the channel to all handlers.
            </summary>
            <param name="message">Message to send to the client</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.AddDownstreamHandler(Griffin.Networking.IDownstreamHandler)">
            <summary>
            Add a new downstream handler 
            </summary>
            <param name="handler">Handler to add</param>
            <remarks>Downstream handlers takes care of everything sent from the client to the channel.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.AddUpstreamHandler(Griffin.Networking.IUpstreamHandler)">
            <summary>
            Add a new upstream handler 
            </summary>
            <param name="handler">Handler to add</param>
            <remarks>Upstream handlers takes care of everything sent from the channel to the client.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.Pipeline.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Griffin.Networking.Channel.Closed">
            <summary>
            Channel/pipeline will be closed after this message have been handled.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.SystemDebugLogger">
            <summary>
            Logs to the debug window in Visual Studio
            </summary>
        </member>
        <member name="M:Griffin.Networking.Logging.SystemDebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.SystemDebugLogger"/> class.
            </summary>
            <param name="loggedType">Type being logged.</param>
        </member>
        <member name="M:Griffin.Networking.Logging.SystemDebugLogger.Write(Griffin.Networking.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the specified log level.
            </summary>
            <param name="logLevel">Used level.</param>
            <param name="msg">Message.</param>
            <param name="exception">The exception (or null).</param>
        </member>
        <member name="P:Griffin.Networking.Logging.SystemDebugLogger.SkipFrameCount">
            <summary>
            Gets number of frames to skip when using stack trace
            </summary>
        </member>
        <member name="T:Griffin.Networking.Pipelines.DelegatePipelineFactory">
            <summary>
            Uses delegates to created scoped handlers
            </summary>
        </member>
        <member name="T:Griffin.Networking.IPipelineFactory">
            <summary>
            Used to produce the pipeline that is used by a connection
            </summary>
        </member>
        <member name="M:Griffin.Networking.IPipelineFactory.Build">
            <summary>
            Create a pipeline for a channel
            </summary>
            <returns>Created pipeline</returns>
        </member>
        <member name="M:Griffin.Networking.Pipelines.DelegatePipelineFactory.AddDownstreamHandler(System.Func{Griffin.Networking.IDownstreamHandler})">
            <summary>
            Add another handler.
            </summary>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.DelegatePipelineFactory.AddDownstreamHandler(Griffin.Networking.IDownstreamHandler)">
            <summary>
            Add an handler instance (singleton)
            </summary>
            <param name="handler">Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> and/or <see cref="T:Griffin.Networking.IUpstreamHandler"/></param>
            <remarks>Same instance will be used for all channels. Use the <see cref="T:Griffin.Networking.IPipelineHandlerContext"/> to store any context information.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.DelegatePipelineFactory.AddUpstreamHandler(System.Func{Griffin.Networking.IUpstreamHandler})">
            <summary>
            Add another handler.
            </summary>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.DelegatePipelineFactory.AddUpstreamHandler(Griffin.Networking.IUpstreamHandler)">
            <summary>
            Add an handler instance (singleton)
            </summary>
            <param name="handler">Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> and/or <see cref="T:Griffin.Networking.IUpstreamHandler"/></param>
            <remarks>Same instance will be used for all channels. Use the <see cref="T:Griffin.Networking.IPipelineHandlerContext"/> to store any context information.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.DelegatePipelineFactory.Build">
            <summary>
            Create a pipeline for a channel
            </summary>
            <returns>Created pipeline</returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.IPeekable">
            <summary>
            Can peek at the next byte without moving forward.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.IPeekable.Peek">
            <summary>
            Peek at the next byte in the sequence.
            </summary>
            <returns>Char if not EOF; otherwise <see cref="F:System.Char.MinValue"/></returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.BufferSliceReader">
            <summary>
            Read text from a buffer slice.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferSliceReader"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferSliceReader"/> class.
            </summary>
            <param name="encoding">Encoding to use when converting byte array to strings.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.#ctor(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferSliceReader"/> class.
            </summary>
            <param name="buffer">Buffer to read from.</param>
            <param name="offset">Where in buffer to start reading</param>
            <param name="count">Number of bytes that can be read.</param>
            <param name="encoding">Encoding to use when converting byte array to strings.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.#ctor(Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferSliceReader"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Consume">
            <summary>
            Consume current character.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Consume(System.Char[])">
            <summary>
            Consume specified characters
            </summary>
            <param name="chars">One or more characters.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ConsumeUntil(System.Char)">
            <summary>
            Consume all characters until the specified one have been found.
            </summary>
            <param name="delimiter">Stop when the current character is this one</param>
            <returns>New offset.</returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ConsumeWhiteSpaces">
            <summary>
            Consumes horizontal white spaces (space and tab).
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ConsumeWhiteSpaces(System.Char)">
            <summary>
            Consume horizontal white spaces and the specified character.
            </summary>
            <param name="extraCharacter">Extra character to consume</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Contains(System.Char)">
            <summary>
            Checks if one of the remaining bytes are a specified character.
            </summary>
            <param name="ch">Character to find.</param>
            <returns>
            	<c>true</c> if found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Read">
            <summary>
            Read a character.
            </summary>
            <returns>
            Character if not EOF; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadLine">
            <summary>
            Get a text line. 
            </summary>
            <returns></returns>
            <remarks>Will merge multi line headers and rewind of end of line was not found.</remarks> 
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadQuotedString">
            <summary>
            Read quoted string
            </summary>
            <returns>string if current character (in buffer) is a quote; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadToEnd(System.String)">
            <summary>
            Read until end of string, or to one of the delimiters are found.
            </summary>
            <param name="delimiters">characters to stop at</param>
            <returns>
            A string (can be <see cref="F:System.String.Empty"/>).
            </returns>
            <remarks>
            Will not consume the delimiter.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadToEnd">
            <summary>
            Read until end of string, or to one of the delimiters are found.
            </summary>
            <returns>A string (can be <see cref="F:System.String.Empty"/>).</returns>
            <remarks>
            Will not consume the delimiter.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadToEnd(System.Char)">
            <summary>
            Read to end of buffer, or until specified delimiter is found.
            </summary>
            <param name="delimiter">Delimiter to find.</param>
            <returns>
            A string (can be <see cref="F:System.String.Empty"/>).
            </returns>
            <remarks>
            Will not consume the delimiter.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadUntil(System.Char)">
            <summary>
            Will read until specified delimiter is found.
            </summary>
            <param name="delimiter">Character to stop at.</param>
            <returns>
            A string if the delimiter was found; otherwise <c>null</c>.
            </returns>
            <remarks>
            Will trim away spaces and tabs from the end.</remarks>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadUntil(System.String)">
            <summary>
            Read until one of the delimiters are found.
            </summary>
            <param name="delimiters">characters to stop at</param>
            <returns>
            A string if one of the delimiters was found; otherwise <c>null</c>.
            </returns>
            <remarks>
            Will not consume the delimiter.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.ReadWord">
            <summary>
            Read until a horizontal white space occurs.
            </summary>
            <returns>A string if a white space was found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Assign(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Assign a new buffer
            </summary>
            <param name="buffer">Buffer to process.</param>
            <param name="offset">Where to start process buffer</param>
            <param name="count">Buffer length</param>
            <exception cref="T:System.ArgumentException">Buffer needs to be a byte array</exception>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSliceReader.Assign(Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Assigns the slice to read from
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.Buffer">
            <summary>
            Gets buffer that we are reading from.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.Current">
            <summary>
            Gets current character
            </summary>
            <value><see cref="F:System.Char.MinValue"/> if end of buffer.</value>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.EndOfFile">
            <summary>
            Gets if end of buffer have been reached
            </summary>
            <value></value>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.HasMore">
            <summary>
            Gets if more bytes can be processed.
            </summary>
            <value></value>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.Index">
            <summary>
            Gets or sets current position in buffer.
            </summary>
            <remarks>
            THINK before you manually change the position since it can blow up
            the whole parsing in your face.
            </remarks>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.Length">
            <summary>
            Gets total length of buffer.
            </summary>
            <value></value>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.Peek">
            <summary>
            Gets next character
            </summary>
            <value><see cref="F:System.Char.MinValue"/> if end of buffer.</value>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSliceReader.RemainingLength">
            <summary>
            Gets number of bytes left.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.ConsoleLogger">
            <summary>
            Log everything to the console
            </summary>
            <remarks>Prints one stack frame using colored output.</remarks>
        </member>
        <member name="M:Griffin.Networking.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.ConsoleLogger"/> class.
            </summary>
            <param name="loggedType">Type being logged.</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ConsoleLogger.Write(Griffin.Networking.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the specified log level.
            </summary>
            <param name="logLevel">Used level.</param>
            <param name="msg">Message.</param>
            <param name="exception">The exception (or null).</param>
        </member>
        <member name="M:Griffin.Networking.Logging.ConsoleLogger.GetColor(Griffin.Networking.Logging.LogLevel)">
            <summary>
            Get a color for a specific log level
            </summary>
            <param name="logLevel">Level to get color for</param>
            <returns>Level color</returns>
        </member>
        <member name="P:Griffin.Networking.Logging.ConsoleLogger.SkipFrameCount">
            <summary>
            Gets number of frames to skip when using stack trace
            </summary>
        </member>
        <member name="T:Griffin.Networking.Pipelines.PipelineUpstreamContext">
            <summary>
            Context for downstream handlers.
            </summary>
            <remarks>Each context is unique for a handler in a channel.</remarks>
        </member>
        <member name="T:Griffin.Networking.IPipelineHandlerContext">
            <summary>
            Context assigned to each channel to be able to continue down the chain or to change direction in the pipe
            </summary>
            <remarks>
            It depends of the type of channel how the processing is done. A <see cref="T:Griffin.Networking.IDownstreamHandler"/> will let the
            processing continue down the pipe when calling <see cref="M:Griffin.Networking.IPipelineHandlerContext.SendDownstream(Griffin.Networking.IPipelineMessage)"/> while it moves the message to the beginning
            of the pipe if calling <see cref="M:Griffin.Networking.IPipelineHandlerContext.SendUpstream(Griffin.Networking.IPipelineMessage)"/> (to let all up stream handlers have a chance to process the message).
            </remarks>
        </member>
        <member name="M:Griffin.Networking.IPipelineHandlerContext.SendUpstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Send message up towards the client
            </summary>
            <param name="message">Message to process</param>
        </member>
        <member name="M:Griffin.Networking.IPipelineHandlerContext.SendDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            Sned the message down towards the channel
            </summary>
            <param name="message">Message to process</param>
        </member>
        <member name="T:Griffin.Networking.Pipelines.PipelineDownstreamContext">
            <summary>
            Context for a downstream (from channel to client) handler
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.SimpleFilteredLogManager`1">
            <summary>
            Logs all entries which has a minimum log level
            </summary>
            <typeparam name="T">Type of inner logger</typeparam>
        </member>
        <member name="M:Griffin.Networking.Logging.SimpleFilteredLogManager`1.#ctor(Griffin.Networking.Logging.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.SimpleFilteredLogManager`1"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Logging.SimpleFilteredLogManager`1.GetLoggerInternal(System.Type)">
            <summary>
            Get a logger for a type
            </summary>
            <param name="loggingType">Type that want's a logger</param>
            <returns>
            Logger
            </returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.Reusable.IBufferRecycler">
            <summary>
            A class which can reuse buffers which are released (the parent class gets disposed).
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.Reusable.IBufferRecycler.Recycle(Griffin.Networking.Buffers.Reusable.BufferSlize)">
            <summary>
            Recycle the buffer that the slice contains
            </summary>
            <param name="slize">Slice which buffer are avaiable for recyling.</param>
        </member>
        <member name="T:Griffin.Networking.Buffers.PeekableStream">
            <summary>
            A stream which supports peeking (lookforward)
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.#ctor(Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.PeekableStream"/> class.
            </summary>
            <param name="slice">Slice used by this peekable stream</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.PeekableStream"/> class.
            </summary>
            <param name="buffer">Buffer used by the stream.</param>
            <param name="offset">Offset in buffer that is assigned to this stream</param>
            <param name="count">Number of assigned bytes.</param>
            <param name="usedCount">Number of bytes which is used in the assigned slice.</param>
            <example>
            <code>
            var buffer = new byte[65536];
            
            // write info to the buffer (fake a receive)
            var info = Encoding.ASCII.GetBytes("Hello world");
            Buffer.BlockCopy(buffer, 32768, info, 0, info.Length);
            
            // we have been assigned a slice from offset 32768 and the slice is 32768 bytes long. 
            // info.length bytes have been written to the slice.
            var stream = new PeekableStream(buffer, 32768, 32768,  info.Length);
            </code>
            </example>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.Peek">
            <summary>
            Peek at the next byte in the sequence.
            </summary>
            <returns>
            Char if not EOF; otherwise <see cref="F:System.Char.MinValue"/>
            </returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. 
                            </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. 
                            </param><param name="count">The maximum number of bytes to be read from the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. 
                            </param><param name="count">The number of bytes to be written to the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.Capacity">
            <summary>
            Gets allocated size.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.PeekableStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:Griffin.Networking.Messages.Sent">
            <summary>
            A message have been sent by the channel
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.Sent.#ctor(Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.Sent"/> class.
            </summary>
            <param name="bufferSlice">The buffer slice.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.Sent.BufferSlice">
            <summary>
            Gets the buffer slice.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.SendStream">
            <summary>
            Send an entire stream
            </summary>
            <remarks>
            Stream will be disposed by the framework
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Messages.SendStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.SendStream"/> class.
            </summary>
            <param name="stream">Stream to send, the framework takes ownership.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.SendStream.Stream">
            <summary>
            Gets stream to send
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.SimpleLogManager`1">
            <summary>
            Log manager which uses one of the base loggers.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Griffin.Networking.Logging.SimpleLogManager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Logging.SimpleLogManager`1"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Logging.SimpleLogManager`1.GetLoggerInternal(System.Type)">
            <summary>
            Get a logger for a type
            </summary>
            <param name="loggingType">Type that want's a logger</param>
            <returns>
            Logger
            </returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.PeekableMemoryStream">
            <summary>
            A memory stream that supports <see cref="T:Griffin.Networking.Buffers.IPeekable"/>.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableMemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.PeekableMemoryStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.PeekableMemoryStream.Peek">
            <summary>
            Peek at the next byte in the sequence.
            </summary>
            <returns>Char if not EOF; otherwise <see cref="F:System.Char.MinValue"/></returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.IBufferSlice">
            <summary>
            A slice in a byte[] buffer.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.Buffer">
            <summary>
            Gets buffer that this slice is int
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.StartOffset">
            <summary>
            Gets offset for this allocated slice
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.Capacity">
            <summary>
            Gets assign size for this slice
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.Position">
            <summary>
            Gets current offset in the slice (offset in whole buffer)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.Count">
            <summary>
            Gets number of bytes written to this slice.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.IBufferSlice.RemainingLength">
            <summary>
            Gets number of bytes left to read.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.Close">
            <summary>
            Close a channel
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.LogLevel">
            <summary>
            Log levels
            </summary>
        </member>
        <member name="F:Griffin.Networking.Logging.LogLevel.Trace">
            <summary>
            Very detailed logs used during diagnostics
            </summary>
        </member>
        <member name="F:Griffin.Networking.Logging.LogLevel.Debug">
            <summary>
            Diagnostics
            </summary>
        </member>
        <member name="F:Griffin.Networking.Logging.LogLevel.Info">
            <summary>
            Events and similar
            </summary>
        </member>
        <member name="F:Griffin.Networking.Logging.LogLevel.Warning">
            <summary>
            Something failed, but processing can continue
            </summary>
        </member>
        <member name="F:Griffin.Networking.Logging.LogLevel.Error">
            <summary>
            Something failed, expected execution path can not succeed.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Channels.TcpServerChannel">
            <summary>
            Server channel implementation
            </summary>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpServerChannel.#ctor(Griffin.Networking.IPipeline,Griffin.Networking.IPipelineFactory,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Channels.TcpServerChannel"/> class.
            </summary>
            <param name="serverPipeline">The server pipeline.</param>
            <param name="childPipelineFactory">The child pipeline factory.</param>
            <param name="maxNumberOfClients">The maximum number of connected clients.</param>
        </member>
        <member name="M:Griffin.Networking.Channels.TcpServerChannel.HandleDownstream(Griffin.Networking.IPipelineMessage)">
            <summary>
            A message have been sent through the pipeline and are ready to be handled by the channel.
            </summary>
            <param name="e">Message that the channel should process.</param>
        </member>
        <member name="P:Griffin.Networking.Channels.TcpServerChannel.Pipeline">
            <summary>
            Gets pipeline that this channel is attached to.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Buffers.ReusableBufferSlice">
            <summary>
            Gives back the buffer to the pool when disposed.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Buffers.BufferSlice">
            <summary>
            Used to share a sliced buffer.
            </summary>
            <remarks>
            A large buffer can be sliced up into chunks to prevent memory defragmentation. This class is used to manage one of those slices.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSlice.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferSlice"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="startOffset">Offset in buffer where the slice starts.</param>
            <param name="capacity">Number of bytes allocated for this slice.</param>
            <param name="count">Number of bytes written to the buffer (if any)</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferSlice.Compact">
            <summary>
            Move remaining bytes to the beginning of the buffer
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.Buffer">
            <summary>
            Gets the slice
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.StartOffset">
            <summary>
            Gets start offset for our buffer slize
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.Capacity">
            <summary>
            Gets number of bytes allocated for our slice
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.Position">
            <summary>
            Gets current offset in buffer
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.RemainingLength">
            <summary>
            Gets number of bytes written that are left in the buffer (from <see cref="P:Griffin.Networking.Buffers.BufferSlice.Position"/> to the end)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.RemainingCapacity">
            <summary>
            Gets total number of bytes which is still writable in the buffer (from <see cref="P:Griffin.Networking.Buffers.BufferSlice.Position"/> to the end)
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.BufferSlice.Count">
            <summary>
            Gets or sets number of bytes written to the buffer.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.ReusableBufferSlice.#ctor(Griffin.Networking.Buffers.BufferPool,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.ReusableBufferSlice"/> class.
            </summary>
            <param name="pool">Pool that the buffer should be released to.</param>
            <param name="buffer">The buffer.</param>
            <param name="startOffset">Offset in buffer where the slice starts.</param>
            <param name="capacity">Number of bytes allocated for this slice.</param>
            <param name="count">Number of bytes written to the buffer (if any)</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.ReusableBufferSlice.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory">
            <summary>
            Uses a <see cref="T:Griffin.Networking.IServiceLocator"/> to build all handlers.
            </summary>
            <remarks>
            You must register all handlers in your service locator if the service locator can't build unregistered components.
            </remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.#ctor(Griffin.Networking.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.AddDownstreamHandler``1">
            <summary>
            Add another handler.
            </summary>
            <typeparam name="T">Handler type. Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> or <see cref="T:Griffin.Networking.IUpstreamHandler"/></typeparam>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.AddDownstreamHandler(Griffin.Networking.IDownstreamHandler)">
            <summary>
            Add an handler instance (singleton)
            </summary>
            <param name="handler">Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> and/or <see cref="T:Griffin.Networking.IUpstreamHandler"/></param>
            <remarks>Same instance will be used for all channels. Use the <see cref="T:Griffin.Networking.IPipelineHandlerContext"/> to store any context information.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.AddUpstreamHandler``1">
            <summary>
            Add another handler.
            </summary>
            <typeparam name="T">Handler type. Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> or <see cref="T:Griffin.Networking.IUpstreamHandler"/></typeparam>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.AddUpstreamHandler(Griffin.Networking.IUpstreamHandler)">
            <summary>
            Add an handler instance (singleton)
            </summary>
            <param name="handler">Must implement <see cref="T:Griffin.Networking.IDownstreamHandler"/> and/or <see cref="T:Griffin.Networking.IUpstreamHandler"/></param>
            <remarks>Same instance will be used for all channels. Use the <see cref="T:Griffin.Networking.IPipelineHandlerContext"/> to store any context information.</remarks>
        </member>
        <member name="M:Griffin.Networking.Pipelines.ServiceLocatorPipelineFactory.Build">
            <summary>
            Create a pipeline for a channel
            </summary>
            <returns>Created pipeline</returns>
        </member>
        <member name="T:Griffin.Networking.Buffers.CircularStream">
            <summary>
            Not yet completed.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.CircularStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.CircularStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="capacity">The capacity.</param>
            <param name="writtenCount">The written count.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Clear(System.Int32,System.Int32)">
            <summary>
            Clears the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Peek">
            <summary>
            Peek at the next byte in the sequence.
            </summary>
            <returns>
            Char if not EOF; otherwise <see cref="F:System.Char.MinValue"/>
            </returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. 
                            </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. 
                            </param><param name="count">The maximum number of bytes to be read from the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.Networking.Buffers.CircularStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. 
                            </param><param name="count">The number of bytes to be written to the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.CircularStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.CircularStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.CircularStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.CircularStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Griffin.Networking.Buffers.CircularStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:Griffin.Networking.Messages.Received">
            <summary>
            We've received bytes from the remote peer.
            </summary>
            <remarks>The buffer will be compacted by the channel when the message has been handled. It's thefore important that <c>BufferSlice.Position</c> is kept
            on the byte after the last read position.</remarks>
        </member>
        <member name="M:Griffin.Networking.Messages.Received.#ctor(System.Net.EndPoint,System.IO.Stream,Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.Received"/> class.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="networkStream">The network stream.</param>
            <param name="readBuffer">The read buffer.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.Received.RemoteEndPoint">
            <summary>
            Gets endpoint that the message is from
            </summary>
        </member>
        <member name="P:Griffin.Networking.Messages.Received.NetworkStream">
            <summary>
            Will likely get removed from the message
            </summary>
        </member>
        <member name="P:Griffin.Networking.Messages.Received.BufferSlice">
            <summary>
            Gets buffer with the received data
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.Connect">
            <summary>
            Connect to a server
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.Connect.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.Connect"/> class.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.Connect.RemoteEndPoint">
            <summary>
            Gets end point to connect to
            </summary>
        </member>
        <member name="T:Griffin.Networking.IUpstreamHandler">
            <summary>
            Used to process messages that are sent from the channel up towards the client
            </summary>
        </member>
        <member name="M:Griffin.Networking.IUpstreamHandler.HandleUpstream(Griffin.Networking.IPipelineHandlerContext,Griffin.Networking.IPipelineMessage)">
            <summary>
            Handle an message
            </summary>
            <param name="context">Context unique for this handler instance</param>
            <param name="message">Message to process</param>
            <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.IPipelineHandlerContext.SendUpstream(Griffin.Networking.IPipelineMessage)"/>.
            </remarks>
        </member>
        <member name="T:Griffin.Networking.Buffers.Reusable.BufferSlize">
            <summary>
            A slice of a larger buffer.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.Reusable.BufferSlize.#ctor(Griffin.Networking.Buffers.Reusable.IBufferRecycler,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.Reusable.BufferSlize"/> class.
            </summary>
            <param name="pool">The pool.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.Reusable.BufferSlize.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.Reusable.BufferSlize.Buffer">
            <summary>
            Gets buffer that this slice is part of
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.Reusable.BufferSlize.Offset">
            <summary>
            Gets current offset in the buffer
            </summary>
        </member>
        <member name="P:Griffin.Networking.Buffers.Reusable.BufferSlize.Length">
            <summary>
            Gets our allocated length
            </summary>
        </member>
        <member name="T:Griffin.Networking.Buffers.BufferPoolStream">
            <summary>
            A stream that will return the buffer to the pool when being disposed.
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPoolStream.#ctor(Griffin.Networking.Buffers.BufferPool,Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferPoolStream"/> class.
            </summary>
            <param name="pool">The pool.</param>
            <param name="slice">The slice.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPoolStream.#ctor(Griffin.Networking.Buffers.BufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferPoolStream"/> class.
            </summary>
            <param name="slice">The slice.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPoolStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPoolStream.Peek">
            <summary>
            Peek at the next byte in the sequence.
            </summary>
            <returns>Char if not EOF; otherwise <see cref="F:System.Char.MinValue"/></returns>
        </member>
        <member name="T:Griffin.Networking.Messages.SendSlice">
            <summary>
            Send a slice 
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.SendSlice.#ctor(Griffin.Networking.Buffers.IBufferSlice)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.SendSlice"/> class.
            </summary>
            <param name="slice">The slice.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.SendSlice.BufferSlice">
            <summary>
            Gets buffer slice to send.
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.SendBuffer">
            <summary>
            Send a byte[] buffer
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.SendBuffer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.SendBuffer"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="count">Number of bytes to send.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.SendBuffer.Buffer">
            <summary>
            Gets buffer
            </summary>
        </member>
        <member name="P:Griffin.Networking.Messages.SendBuffer.Offset">
            <summary>
            Gets our starting offset
            </summary>
        </member>
        <member name="P:Griffin.Networking.Messages.SendBuffer.Count">
            <summary>
            Gets number of bytes to send
            </summary>
        </member>
        <member name="T:Griffin.Networking.Messages.PipelineFailure">
            <summary>
            One of the handlers failed.
            </summary>
            <remarks>Will be sent when one of the handlers threw an exception that wasn't handled. The channel and pipeline will be cleaned up
            and <see cref="T:Griffin.Networking.Channel.Closed"/> after this message have been handled.</remarks>
        </member>
        <member name="M:Griffin.Networking.Messages.PipelineFailure.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.PipelineFailure"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.PipelineFailure.Exception">
            <summary>
            Gets exception that was thrown by a handler in the pipeline
            </summary>
        </member>
        <member name="T:Griffin.Networking.Logging.NullLogger">
            <summary>
            Throws away all logs
            </summary>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Trace(System.String)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Trace(System.String,System.Exception)">
            <summary>
            Detailed framework messages used to find wierd errors.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Thrown exception</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Debug(System.String)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
            Diagonstic messages. Not as detailed as the trace messages but still only useful during debugging.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Warning(System.String)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Warning(System.String,System.Exception)">
            <summary>
            Something did not go as planned, but the framework can still continue as expected.
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Error(System.String)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Griffin.Networking.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
            Something failed. The framework must abort the current processing
            </summary>
            <param name="message">Message to log</param>
            <param name="exception">Exception which has been thrown</param>
        </member>
        <member name="T:Griffin.Networking.Buffers.BufferPool">
            <summary>
            Used to promote buffer reusage instead of allocating a new buffer each time
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPool.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.BufferPool"/> class.
            </summary>
            <param name="bufferSize">Size of each buffer.</param>
            <param name="count">Number of initial buffers.</param>
            <param name="capacity">Maximum amount of buffers.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPool.Pop">
            <summary>
            Get a new buffer.
            </summary>
            <returns>A buffer</returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPool.PopSlice">
            <summary>
            Get a buffer wrapped in a slice.
            </summary>
            <returns>Slice</returns>
        </member>
        <member name="M:Griffin.Networking.Buffers.BufferPool.Push(System.Byte[])">
            <summary>
            return a buffer
            </summary>
            <param name="buffer">buffer to return</param>
        </member>
        <member name="T:Griffin.Networking.Messages.Disconnected">
            <summary>
            A channel have been disconnected by remote peer
            </summary>
        </member>
        <member name="M:Griffin.Networking.Messages.Disconnected.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Messages.Disconnected"/> class.
            </summary>
            <param name="exception">NULL = graceful disconnect.</param>
        </member>
        <member name="P:Griffin.Networking.Messages.Disconnected.Exception">
            <summary>
            Gets thrown exception (unless we got disconnected gracefully)
            </summary>
        </member>
        <member name="T:Griffin.Networking.Buffers.Reusable.ByteBufferPool">
            <summary>
            Another buffer implementation (experimental)
            </summary>
        </member>
        <member name="M:Griffin.Networking.Buffers.Reusable.ByteBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Buffers.Reusable.ByteBufferPool"/> class.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Griffin.Networking.Buffers.Reusable.ByteBufferPool.Pop">
            <summary>
            Return a buffer
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
