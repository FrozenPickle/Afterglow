@inherits ViewPage

@{
    Layout = "SimpleLayout";
    ViewBag.Title = "Afterglow";
    var session = Request.GetSession();
}
<script type="text/javascript">
    var agSessionId = null;
</script>

@if (session != null && session.IsAuthenticated)
{
    <script type="text/javascript">
        agSessionId = @session.Id;
    </script>
}
<script type="text/javascript">

    angular.module('afterglow',['ui.bootstrap']);//,'ui.bootstrap.collapse','ui.bootstrap.accordion']);
    //angular.bootstrap('afterglow',[]);
  /*  angular.module('jqmDirectives', [])
    .directive('refreshList', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                $(element).closest(':jqmData(role=listview)').listview('refresh');
            }
        };
    });*/
    var logTemplate = {};
    var installedPluginTemplate = {};
    var lightPreviewTemplate = {};

    // Apply UI
    $(function () {

        $("#startStopBtn").button();
        $("#logoutBtn").button();
//        $('#previewAndSettings').accordion();
//        $("#previewAndSettings").accordion({
//            'fillSpace': true,
//            'clearStyle': true
//        });
        
        //Get Templates
        logTemplate = _.template($('#logTemplate').html());
      //  installedPluginTemplate = _.template($('#installedPluginTemplate').html());
        lightPreviewTemplate = _.template($('#lightPreviewTemplate').html());

        if (agSessionId) {
            $('#logout').show();
        } else {
			// Temporarily disabled login
            //$('#login').show();
        }

        $(document).ajaxError(function (event, jqXHR, settings, thrownError) {
            var response = $.parseJSON(jqXHR.responseText);
            var msg = "Ajax error";
            if (response && response.ResponseStatus) {
                msg = "<pre>" + response.ResponseStatus.Message + "\r\n" + response.ResponseStatus.StackTrace + "</pre>";
            } else if (thrownError) {
                msg = thrownError;
            }
            $("#log").html(logTemplate({ title: "Error", message: msg }));
        });

        



    });

    function DoLogin() {
        var req = $.post('/auth/credentials?format=json', $('#login').serialize(),
        function (data, textStatus, jqXHR) {
            agSessionId = data.SessionId;
            //$('#login').hide();
            //$('#loggedIn').show();
        }, 'json');
    }

    function DoLogout() {
        $.get('/auth/logout?format=json', null, function (data, textStatus, jqXHR) {
            //$('#login').show();
            //$('#loggedIn').hide();
            agSessionId = null;
            if (timer)
                clearInterval(timer);
        }, 'json');
    }
    
    var timer = null;

    function DoStartStop() {
        $.post('/runtime?format=json', {},
        function (data, textStatus, jqXHR) {
            afterglowRuntime = data;
            $('#startStopBtn').html(afterglowRuntime.Active ? 'Stop' : 'Start');

            if (afterglowRuntime.Active) {
                timer = setInterval(getPreview, 100);
            } else {
                clearInterval(timer);
                timer = null;
            }
        }, 'json');
    }
    
    var firstPreview = true;
    function getPreview() {

        $.get("/preview?format=json", {}, function (data, status, xhr) {
            clearInterval(timer);
            timer = null;
            if (firstPreview) {
				lightPreviewTemplate = _.template($('#lightPreviewTemplate').html());
                var lights = "";
                $(data.Lights).each(function (index, item) {
                    $("#previewScreen").append(lightPreviewTemplate({ index: item.Index, colour: "#" + item.Colour.R.toString(16) + item.Colour.G.toString(16) + item.Colour.B.toString(16) }));
                });
                //$("#previewScreen").html();
                firstPreview = false;
            }
            else {
                $(data.Lights).each(function (index, item) {
                    $("#lightPreview" + item.Index).css("background-color", "#" + item.Colour.R.toString(16) + item.Colour.G.toString(16) + item.Colour.B.toString(16));
                });
            }
            timer = setInterval(getPreview, 100);
        });
        
    }

    function AfterglowCtrl($scope, $http, $dialog) {
        $scope.oneAtATime = true;

        /*
        http://angular-ui.github.io/bootstrap/
        http://bootswatch.com/slate/#
        http://mgcrea.github.io/angular-strap/#/modal
        http://plnkr.co/edit/xKP5PW3Dco1CczmCuuVN?p=preview
        https://github.com/angular-ui/bootstrap/tree/master/src/dialog
        */

        $scope.afterglowSetup = null;
        $scope.currentProfile = null;
        $scope.pluginType = null;

        $http.get('/setup?format=json').success(function (data) {
            $scope.afterglowSetup = data;
        });
        $http.get('/runtime?format=json').success(function (data) {
            $scope.afterglowRuntime = data;
        });
        
        $scope.save = function () {
            $http.post('/setup?format=json', $scope.afterglowSetup).success(function (data) {
                $scope.afterglowSetup = data;
            });
        }

        $scope.selectProfile= function(profile, pluginType){
            $scope.currentProfile = profile;
            $scope.pluginType = pluginType;
        }

        $scope.updateProfile = function (plugin){
            if ($scope.currentProfile == null || plugin == null) {
                return;
            }
            
            var data = {profileId: $scope.currentProfile.Id, pluginId: plugin.Id, pluginType: $scope.pluginType, actionType: 'add'};
            $http.post('/updateProfile?format=json', data).success( function( data){
                $scope.afterglowSetup = data;
            });
        }

        $scope.updateProfileGeneralSettings = function(){
            if ($scope.currentProfile == null) {
                return;
            }
            
            var data = {profileId: $scope.currentProfile.Id, name: $scope.currentProfile.Name, description: $scope.currentProfile.Description, frameRateLimiter: $scope.currentProfile.FrameRateLimiter, actionType: 'update'};
            $http.post('/updateProfile?format=json', data).success( function( data){
                $scope.afterglowSetup = data;
            });
        }

        $scope.removePluginFromProfile = function (profile, pluginType, plugin){
            if (profile == null || plugin == null) {
                return;
            }
            var data = {profileId: profile.Id, pluginId: plugin.Id, pluginType: pluginType, actionType: 'remove'};
            $http.post('/updateProfile?format=json', data).success( function( data){
                $scope.afterglowSetup = data;
            });
        }

        $scope.shouldBeOpen = {};

        // Toggle modal
        $scope.showPluginSelect = function(profile, pluginType){
            $scope.currentProfile = profile;
            $scope.pluginType = pluginType;
            
            $scope.shouldBeOpen[pluginType] = true;
        };

        $scope.close = function () {
            $scope.shouldBeOpen[$scope.pluginType] = false;
        };

        $scope.opts = {
            backdropFade: true,
            dialogFade:true
        };
    }
    //look at this http://stackoverflow.com/questions/13836765/angular-scope-inside-script

</script>

<div ng-controller="AfterglowCtrl">
	
    <div id="mainContent">
        <div class="navbar">
            <div class="navbar-inner">
                <ul class="nav">
                    <li>
                        <a href="#" onclick="DoStartStop();">Start</a>
                    </li>
                    <li>
                        <a href="#">TODO: Log In/Out</a>
                    </li>
                </ul>
            </div>
        </div>
        <div>
		    <div>

                <form id="login" method="post" action="#" onsubmit="DoLogin(); return false;" style="display:none;">
                    <label for="UserName">User name: </label><input type="text" name="UserName" id="UserName" /><br />
                    <label for="Password">Password: </label><input type="password" name="Password" id="Password" /><br />
                    @*<label for="RememberMe">Remember me: </label><input type="checkbox" name="RememberMe" checked="checked" />*@
                <input type="submit" value="Login" onclick="DoLogin(); return false;" />
                </form>
                <!--<div id="loggedIn" >
                    <div id="StartStop">
                        <button onclick="DoStartStop();" id="startStopBtn" style="width:100%" type="button" class="btn">Start</button>
                    </div>
                    <div id="logout">
                        <button onclick="DoLogout();" id="logoutBtn" style="width:100%" type="button" class="btn">Logout</button>
                    </div>
                </div>-->
            </div>
            
        <accordion close-others="false">
		    <accordion-group heading="Preview">
                <div class="navbar">
                    <div class="navbar-inner">
                        <ul class="nav">
                            <li>
                                <a href="#">TODO: Preview On/Off</a>
                            </li>
                        </ul>
                    </div>
                </div>
                @Html.Partial("PreviewView")
            </accordion-group>
            <accordion-group heading="Settings">
                <div class="navbar">
                    <div class="navbar-inner">
                        <ul class="nav">
                            <li>
                                <a href="#">TODO: General Settings</a>
                            </li>
                            <li>
                                <a href="#">TODO: Import Settings</a>
                            </li>
                            <li>
                                <a href="#">TODO: Export Settings</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <accordion  id="settings">
                    <accordion-group heading="Installed Plugin Types" id="installedPlugins" >
                        @Html.Partial("InstalledPluginTypesView")
                    </accordion-group>
                    <accordion-group heading="Configured Plugins" id="configuredPlugins">
                        @Html.Partial("ConfiguredPluginsView")
                    </accordion-group>
                    <accordion-group heading="Profiles">
                        @Html.Partial("ProfilesView")
                    </accordion-group>
                </accordion-group>
            </accordion>
        </div>
    </div><!-- /content -->
</div>

<div id="log"></div>

</div> <!-- Controller Scope -->

<script id="logTemplate" type="text/template">
	<div class="ui-state-error ui-corner-all" style="padding: 0 .7em;">
		<p><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span>
		<strong><%= title %>:</strong> <%= message %></p>
	</div>
</script>

<script id="lightPreviewTemplate" type="text/template">
    <span id="lightPreview<%= index %>" style="float: left; display: block;background-color: <%= colour %>; width:10px; height:10px"></span>
</script>